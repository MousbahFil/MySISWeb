package com.mousbah.mysis.web.client;

import com.google.gwt.core.client.GWT;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.event.dom.client.KeyCodes;
import com.google.gwt.event.dom.client.KeyDownEvent;
import com.google.gwt.event.dom.client.KeyDownHandler;
import com.google.gwt.user.client.History;
import com.google.gwt.user.client.Window;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.DecoratorPanel;
import com.google.gwt.user.client.ui.Grid;
import com.google.gwt.user.client.ui.HasHorizontalAlignment;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.PasswordTextBox;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.TextBox;
import com.google.gwt.user.client.ui.VerticalPanel;

public class LoginScreen extends DecoratorPanel{
	private static Label userNameLabel = new Label("User Name:");
	private static TextBox userNameTextBox = new TextBox();
	private static Label passwordLabel = new Label("Password:");
	private static PasswordTextBox passwordTextBox = new PasswordTextBox();
	private static Button loginButton = new Button("Login");
	private UserInseterAsync messageService = GWT.create(UserInseter.class);
	private RootPanel rootPanel=RootPanel.get("gwtContainer");

	

	public LoginScreen() {
		super();
		drawScreen();
		History.newItem(HistoryTokens.LOGIN.getValue(), false);
	}
	
	private void drawScreen(){
		loginButton.addClickHandler(new LoginHandler());
		passwordTextBox.addKeyDownHandler(new LoginKeyDownHandler());
	     
		  Grid grid = new Grid(4, 2);
	      
	      grid.setWidget(0, 0, userNameLabel);
	      grid.setWidget(0, 1,userNameTextBox);
	      grid.setWidget(1, 0, passwordLabel);
	      grid.setWidget(1, 1,passwordTextBox);
	      
	      VerticalPanel panel = new VerticalPanel();
	      panel.setSpacing(10);
	      panel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
	      panel.setSize("300", "100");
	      panel.add(grid);
	      panel.add(loginButton);
	      add(panel);
	}
	
	  
		private class AuthenticateUserCallback implements AsyncCallback<Boolean> {

			public void onFailure(Throwable caught) {
				Window.alert(caught.toString());
			}

			public void onSuccess(Boolean result) {
				if(result){
					messageService.getUser(userNameTextBox.getText(), new UserRetrievalCallBack() );
				}else{
					Window.alert("Wrong user name or password entered!");
				}
			}	   
		   }
		
	
		
		private class UserRetrievalCallBack implements AsyncCallback<GWTUser> {

			public void onFailure(Throwable caught) {
				Window.alert(caught.toString());
			}

			public void onSuccess(GWTUser result) {
				switch (result.getUserType()) {
				case STUDENT:
					messageService.getStudentfromUser(result, new StudentFromUserCallback());
					break;

				case ADMINISTRATOR:
					rootPanel.clear();
					AdministrationScreen screen = new AdministrationScreen(result);
					rootPanel.add(screen);
					break;
					
				default:
					Window.alert("this user type is not supported!");
					break;
				}
			}

		   }
		
		private class StudentFromUserCallback implements AsyncCallback<GWTStudent> {

			public void onFailure(Throwable caught) {
				Window.alert(caught.toString());
			}

			public void onSuccess(GWTStudent student) {
				try {
					rootPanel.clear();
					HomeScreen screen = new HomeScreen(student);
					rootPanel.add(screen);
					} catch (Exception e) {
						Window.alert(e.toString());
					}
			}	   
		   }
		
		 private class LoginHandler implements ClickHandler {
			   public void onClick(ClickEvent event) {
				   messageService.validateUser(userNameTextBox.getText(), passwordTextBox.getText(),new AuthenticateUserCallback());
		      }
		   }
	
		private class LoginKeyDownHandler implements KeyDownHandler {
		      public void onKeyDown(KeyDownEvent event) {
		         if(event.getNativeKeyCode() == KeyCodes.KEY_ENTER){
		        	 messageService.validateUser(userNameTextBox.getText(), passwordTextBox.getText(),new AuthenticateUserCallback());
		         }
		      
		      }
		   }

}
